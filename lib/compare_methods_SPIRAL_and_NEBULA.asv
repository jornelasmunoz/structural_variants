%compare_methods_SPIRAL_and_NEBULA.m
% This script compares the simulated diploid, 1 parent-1 child data using
% SPIRAL-- Poisson-based method and
% NEBULA-- Negative Binomial-based method

% This code was adapted from Melissa Spence and Mario Banuelos's SV work

clc;
clear;
close all

% =========================================================================
% =         Comparison of methods for the dataset: Simulated Data
% =========================================================================

% Load Simulated Data
filename = ['Users/jocelynornelasmunoz/Desktop/structural_variants/data/simulated/' ...
            '4p_4c_coverage/0.02pctNovel.mat'];
load(filename)

tauvals= [1];
gamma= 10;
for i=1:length(tauvals)
     t= tauvals(i);
     
     tau=[t; t*gamma];
    % Define true signal f, observed signal s, and number of subvectors in
    % true signal
    f_true = double([z_p; z_h; z_n; y_p; y_h; y_n]);
    s_obs = double([s_p; s_c]);
    subvectors = 6;

    N = length(f_true);
    n = N/subvectors;

    % Set up diagonal block matrix A
    % the choice to allocate for n nonzero values is arbitrary
    A = sparse(2*n, 6*n, n);
    A(1:n,1:n) = A_zp;
    A(1:n, 3*n+1:4*n) = A_yp;
    A(n+1:2*n, n+1:2*n) = A_zc;
    A(n+1:2*n, 2*n+1:3*n) = A_zc;
    A(n+1:2*n, 4*n+1:5*n) = A_yc;
    A(n+1:2*n, 5*n+1:6*n) = A_yc;

    % Set up function handles for computing A and A^T
    AT  = @(x)A'*x;
    A   = @(x)A*x;

    % =====================================================================
    % =             Set up for SPIRAL Method reconstruction               =
    % =====================================================================
    
    % set maximum number of iterations, tol, and when to print to screen
    maxiter = 10;
    tolerance = 1e-8;
    verbose = 100;

    % Simple initialization:
    % initialization of f to start with
    % AT(y) rescaled to a least-squares fit to the mean intensity
    f_init = (sum(s_obs)*numel(AT(s_obs))/sum(AT(s_obs)))...
            *AT(ones(size(s_obs))).*AT(s_obs);

    % Run SPIRAL algorithm
    [fhat_SPIRAL, iterations_SPIRAL, objective_SPIRAL,...
    reconerror_SPIRAL, cputime_SPIRAL] ...
        = NEBULA(s_obs,A,tau,'poisson',subvectors,...
        'maxiter',maxiter,...
        'Initialization',f_init,...
        'AT',AT,...
        'miniter',5,...
        'stopcriterion',3,...
        'tolerance',tolerance,...
        'alphainit',1,...
        'alphamin', 1e-30,...
        'alphamax', 1e30,...
        'alphaaccept',1e30,...
        'logepsilon',1e-10,...
        'saveobjective',1,...
        'savereconerror',1,...
        'savecputime',1,...
        'savesolutionpath',0,...
        'truth',f_true,...
        'verbose',verbose);

    % Separate reconstruction into each signal
    fhat_SPIRAL_p = 2*fhat_SPIRAL(1:n)      + fhat_SPIRAL(3*n+1:4*n);
    fhat_SPIRAL_h = 2*fhat_SPIRAL(n+1:2*n)  + fhat_SPIRAL(4*n+1:5*n);
    fhat_SPIRAL_n = 2*fhat_SPIRAL(2*n+1:3*n)+ fhat_SPIRAL(3*n+1:4*n);
end